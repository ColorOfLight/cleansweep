# TODO
# - handle game complete
# - reset the game
# - handle the shineness

direction: right

classes: {
  Entity: {
    width: 800
    style: {
      stroke-width: 0
      fill: "#FFD700" # orange yellow
      border-radius: 5
    }
  }

  Component: {
    width: 600
    style: {
      stroke-width: 0
      fill: "#44C7B1" # pastel green
      border-radius: 5
    }
  }

  System: {
    width: 1000
    style: {
      stroke-width: 0
      fill: "#87CEEB" # sky blue
      border-radius: 5
    }
  }

  ClientInterface: {
    width: 600
    style: {
      stroke-width: 0
      fill: "#FFA07A" # light salmon
      border-radius: 5
    }
  }
}

vars: {
  vRenderUniformComponent: {
    class: Component
    shape: class

    + uniform_block_name: string
    + uniform_buffer_id: uint
  }

  vRenderTextureComponent: {
    class: Component
    shape: class

    + texture_id: uint
    + width: int
    + height: int
  }
}

# Entity & Components
PlayerEntity: {
  label: Player
  class: Entity

  CameraComponent: {
    class: Component
    shape: class

    + position: Vec3
    + front: Vec3
    + up: Vec3
  }

  RenderUniformComponent: {
    ...${vRenderUniformComponent}
  }

  CleanerComponent: {
    class: Component
    shape: class

    + ray_radius: float
    + hitting_radius: float
  }
}

WashableEntity: {
  label: Washable
  class: Entity

  RenderMaterialComponent: {
    class: Component
    shape: class

    + shader_program_id: uint
  }
}

WashablePartEntity: {
  label: WashablePart
  class: Entity

  DirtMapComponent: {
    class: Component
    shape: class

    + cleanness: float
    + texture: "float[][]"
    + area: float
  }

  TransformComponent: {
    class: Component
    shape: class

    + position: Vec3
    + scale: Vec3
    + rotation: Vec3
  }

  CleanMarkComponent: {
    class: Component
    shape: class

    + marks: "vector<{Vec2i, float}>" # texture_coodrs, radius
  }

  RenderTextureComponent: {
    ...${vRenderTextureComponent}
  }

  RenderUniformComponent: {
    ...${vRenderUniformComponent}
  }

  RenderGeometryComponent: {
    class: Component
    shape: class

    + vertices: "vector<float * 8>"
    + indices: "vector<uint>"
  }
}

Client: {
  label: Client (web browser)

  ClientInputComponent: {
    class: Component
    shape: class

    + pressedKeyMap: "{[W|A|S|D]: boolean}"
    + isPointerDown: boolean
    + pointerPosition: "[number, number]"
  }

  ClientEventComponent: {
    class: Component
    shape: class

    + reset: boolean
  }

  Canvas: {
    class: ClientInterface
    shape: class
  }

  ClientFunctions: {
    class: ClientInterface
    shape: class

    setTotalCompleteness: void
  }
}

GameEntity: {
  label: Game
  class: Entity

  InputComponent: {
    class: Component
    shape: class

    + pressedKeyMap: "struct {[enum:WASD]: bool}"
    + isPointerDown: bool
    + pointerPosition: Vec2i
  }

  GameStateComponent: {
    class: Component
    shape: class

    + state: playing | completed
    + completeness: float
  }
}

# Relationships
WashablePartEntity -> WashableEntity: included

# Systems
Systems: {
  description: |md
    - "Component" is omitted for parameters and return types
    - Return types will be turned into return parameters in real code
  |

  ClientSyncSystem: {
    class: System
    shape: class

    + syncInput(ClientInput): Input
    + consumeEvent(ClientEvent): ClientEvent, GameState
  }

  TransformSystem: {
    class: System
    shape: class

    + transform(Input): Camera
  }

  CleanSystem: {
    class: System
    shape: class

    + markToClean(Input, Cleaner, Camera, Transform\[\]): "CleanMark[]"
    + clean(CleanMark): "DirtMap"
  }

  RenderSystem: {
    class: System
    shape: class

    + updatePlayerUniform(Camera): RenderUniform
    + render(RenderGeometry, RenderMaterial, RenderUniform\[\], RenderTexture): void
  }

  CalculateSystem: {
    class: System
    shape: class

    + calculateCompleteness(DirtMap\[\]): GameState
  }

  FeedbackSystem: {
    class: System
    shape: class

    + setTotalCompleteness(GameState): void
  }
}

# -- Relationships --#
# ClientSyncSystem
Client.ClientInputComponent -> Systems.ClientSyncSystem
Client.ClientEventComponent <-> Systems.ClientSyncSystem
Systems.ClientSyncSystem -> GameEntity.InputComponent
Systems.ClientSyncSystem -> GameEntity.GameStateComponent

# TransformSystem
Systems.TransformSystem <- GameEntity.InputComponent
Systems.TransformSystem -> PlayerEntity.CameraComponent

# CleanSystem
Systems.CleanSystem <- GameEntity.InputComponent
Systems.CleanSystem <- PlayerEntity.CleanerComponent
Systems.CleanSystem <- PlayerEntity.CameraComponent
Systems.CleanSystem <- WashablePartEntity.TransformComponent
Systems.CleanSystem <-> WashablePartEntity.CleanMarkComponent
Systems.CleanSystem -> WashablePartEntity.DirtMapComponent

# RenderSystem
Systems.RenderSystem <- PlayerEntity.CameraComponent
Systems.RenderSystem -> PlayerEntity.RenderUniformComponent
Systems.RenderSystem <- WashablePartEntity.RenderGeometryComponent
Systems.RenderSystem <- WashableEntity.RenderMaterialComponent
Systems.RenderSystem <- WashablePartEntity.RenderUniformComponent
Systems.RenderSystem <- WashablePartEntity.RenderTextureComponent
Systems.RenderSystem <- PlayerEntity.RenderUniformComponent
Client.Canvas <- Systems.RenderSystem

# CalculateSystem
Systems.CalculateSystem <- WashablePartEntity.DirtMapComponent
Systems.CalculateSystem -> GameEntity.GameStateComponent

# FeedbackSystem
Systems.FeedbackSystem <- GameEntity.GameStateComponent
Client.ClientFunctions <- Systems.FeedbackSystem
