# TODO
# - handle game complete
# - reset the game
# - handle the shineness

direction: right

classes: {
  Entity: {
    width: 800
    style: {
      stroke-width: 0
      fill: "#FFD700" # orange yellow
      border-radius: 5
    }
  }

  Component: {
    width: 600
    style: {
      stroke-width: 0
      fill: "#44C7B1" # pastel green
      border-radius: 5
    }
  }

  System: {
    width: 1200
    style: {
      stroke-width: 0
      fill: "#87CEEB" # sky blue
      border-radius: 5
    }
  }

  ClientInterface: {
    width: 600
    style: {
      stroke-width: 0
      fill: "#FFA07A" # light salmon
      border-radius: 5
    }
  }
}

vars: {
  vGrUniformComponent: {
    class: Component
    shape: class
    label: GrUniformComponent

    + uniform_block_name: string
    + uniform_buffer_id: uint
  }

  vGrTextureComponent: {
    class: Component
    shape: class
    label: GrTextureComponent

    + texture_id: uint
    + width: int
    + height: int
  }

  vGrFrom: {
    style: {
      stroke-dash: 3
    }
  }
}

# Entity & Components
PlayerEntity: {
  label: Player
  class: Entity

  CleanerComponent: {
    class: Component
    shape: class

    + ray_radius: float
    + hitting_radius: float
  }

  CameraComponent: {
    class: Component
    shape: class

    + position: Vec3
    + front: Vec3
    + up: Vec3
    + fov_radian: float
    + needs_update: bool
  }

  CameraGrUniformComponent: {
    ...${vGrUniformComponent}
  }

  CameraComponent -> CameraGrUniformComponent: data to {
    ...${vGrFrom}
  }
}

WashableEntity: {
  label: Washable
  class: Entity

  MaterialComponent: {
    class: Component
    shape: class

    + material_type: "enum:PHONG"
  }

  GrMaterialComponent: {
    class: Component
    shape: class

    + shader_program_id: uint
  }

  MaterialComponent -> GrMaterialComponent: data to {
    ...${vGrFrom}
  }
}

WashablePartEntity: {
  label: WashablePart
  class: Entity

  DirtMapComponent: {
    class: Component
    shape: class

    + cleanness: float
    + dirt_map: "float[][]"
    + area: float
    + needs_update: bool
  }

  DirtGrTextureComponent: {
    ...${vGrTextureComponent}
  }

  TransformComponent: {
    class: Component
    shape: class

    + position: Vec3
    + scale: Vec3
    + rotation: Vec3
    + needs_update: bool
  }

  TransformGrUniformComponent: {
    ...${vGrUniformComponent}
  }

  CleanMarkComponent: {
    class: Component
    shape: class

    + marks: "vector<{Vec2i, float}>" # texture_coodrs, radius
  }

  GeometryComponent: {
    class: Component
    shape: class

    + vertices: "vector<float * 8>"
    + indices: "vector<uint>"
  }

  GrGeometryComponent: {
    class: Component
    shape: class

    + vao_id: uint
    + vbo_id: uint
    + ebo_id: unit
  }

  DirtMapComponent -> DirtGrTextureComponent: data to {
    ...${vGrFrom}
  }

  TransformComponent -> TransformGrUniformComponent: data to {
    ...${vGrFrom}
  }

  GeometryComponent -> GrGeometryComponent: data to {
    ...${vGrFrom}
  }
}

Client: {
  label: Client (web browser)

  ClientInputComponent: {
    class: Component
    shape: class

    + pressedKeyMap: "{[W|A|S|D]: boolean}"
    + isPointerDown: boolean
    + pointerPosition: "[number, number]"
    + canvasSize: "[number, number]"
  }

  ClientEventComponent: {
    class: Component
    shape: class

    + reset: boolean
  }

  Canvas: {
    class: ClientInterface
    shape: class
  }

  ClientFunctions: {
    class: ClientInterface
    shape: class

    setTotalCompleteness: void
  }
}

GameEntity: {
  label: Game
  class: Entity

  InputComponent: {
    class: Component
    shape: class

    + pressed_key_map: "struct {[enum:WASD]: bool}"
    + is_pointer_down: bool
    + pointer_position: "[float, float]"
    + canvas_size: "[int, int]"
  }

  EventComponent: {
    class: Component
    shape: class

    + reset: bool
  }

  GameStateComponent: {
    class: Component
    shape: class

    + state: playing | completed
    + completeness: float
  }
}

# Relationships
WashablePartEntity -> WashableEntity: included

# Systems
Systems: {
  description: |md
    - "Component" is omitted for parameters and return types
    - Return types will be turned into return parameters in real code
    - Relationships for GrSyncSystem are omitted for simplicity
  |

  ClientSyncSystem: {
    class: System
    shape: class

    + syncInput(ClientInput): Input
    + consumeEvent(ClientEvent): ClientEvent, Event
  }

  ManageSystem: {
    class: System
    shape: class

    + resetGame(Event): Input, GameState, Camera, Cleaner, DirtMap, Transform, CleanMark, Event
  }

  TransformSystem: {
    class: System
    shape: class

    + transformCamera(Input): Camera
  }

  CleanSystem: {
    class: System
    shape: class

    + markToClean(Input, Cleaner, Camera, Transform\[\]): "CleanMark[]"
    + clean(CleanMark): "DirtMap"
  }

  GrSyncSystem: {
    class: System
    shape: class

    + updateGeometry(Geometry): GrGeometry
    + updateMaterial(Material): GrMaterial
    + updateCameraUniform(Camera): GrUniform
    + updateTransformUniform(Transform): GrUniform
    + updateDirtTexture(DirtMap): GrTexture
  }

  RenderSystem: {
    class: System
    shape: class

    + initContext(InputComponent): void
    + render(GrGeometry, GrMaterial, GrUniform\[\], GrTexture): void
  }

  CalculateSystem: {
    class: System
    shape: class

    + calculateCompleteness(DirtMap\[\]): GameState
  }

  FeedbackSystem: {
    class: System
    shape: class

    + setTotalCompleteness(GameState): void
  }
}

# -- Relationships --#
# ClientSyncSystem
Client.ClientInputComponent -> Systems.ClientSyncSystem
Client.ClientEventComponent <-> Systems.ClientSyncSystem
Systems.ClientSyncSystem -> GameEntity.InputComponent
Systems.ClientSyncSystem -> GameEntity.EventComponent

# ManageSystem
Systems.ManageSystem <-> GameEntity.EventComponent
Systems.ManageSystem <- GameEntity.InputComponent
Systems.ManageSystem <- GameEntity.GameStateComponent
Systems.ManageSystem <- PlayerEntity.CameraComponent
Systems.ManageSystem <- PlayerEntity.CleanerComponent
Systems.ManageSystem <- WashablePartEntity.DirtMapComponent
Systems.ManageSystem <- WashablePartEntity.TransformComponent
Systems.ManageSystem <- WashablePartEntity.CleanMarkComponent

# TransformSystem
Systems.TransformSystem <- GameEntity.InputComponent
Systems.TransformSystem -> PlayerEntity.CameraComponent

# CleanSystem
Systems.CleanSystem <- GameEntity.InputComponent
Systems.CleanSystem <- PlayerEntity.CleanerComponent
Systems.CleanSystem <- PlayerEntity.CameraComponent
Systems.CleanSystem <- WashablePartEntity.TransformComponent
Systems.CleanSystem <-> WashablePartEntity.CleanMarkComponent
Systems.CleanSystem -> WashablePartEntity.DirtMapComponent

# GrSyncSystem
# - Relationships for GrSyncSystme are omitted for simplicity
# Systems.GrSyncSystem <- WashablePartEntity.GeometryComponent
# Systems.GrSyncSystem -> WashablePartEntity.GrGeometryComponent
# Systems.GrSyncSystem <- WashableEntity.MaterialComponent
# Systems.GrSyncSystem -> WashableEntity.GrMaterialComponent
# Systems.GrSyncSystem <- PlayerEntity.CameraComponent
# Systems.GrSyncSystem -> PlayerEntity.CameraGrUniformComponent
# Systems.GrSyncSystem <- WashablePartEntity.TransformComponent
# Systems.GrSyncSystem -> WashablePartEntity.TransformGrUniformComponent
# Systems.GrSyncSystem <- WashablePartEntity.DirtMapComponent
# Systems.GrSyncSystem -> WashablePartEntity.DirtGrTextureComponent

# RenderSystem
Client.Canvas <- Systems.RenderSystem
Systems.RenderSystem <- GameEntity.InputComponent
Systems.RenderSystem <- WashablePartEntity.GrGeometryComponent
Systems.RenderSystem <- WashableEntity.GrMaterialComponent
Systems.RenderSystem <- PlayerEntity.CameraGrUniformComponent
Systems.RenderSystem <- WashablePartEntity.TransformGrUniformComponent
Systems.RenderSystem <- WashablePartEntity.DirtGrTextureComponent

# CalculateSystem
Systems.CalculateSystem <- WashablePartEntity.DirtMapComponent
Systems.CalculateSystem -> GameEntity.GameStateComponent

# FeedbackSystem
Systems.FeedbackSystem <- GameEntity.GameStateComponent
Client.ClientFunctions <- Systems.FeedbackSystem
